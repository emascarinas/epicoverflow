'use strict';
angular.module('epicoverflowApp')
        .factory('question', function ($http, config, util, $routeParams) {
            return {
                getQuestions: function (page,tag) {
                    var param = tag !== undefined ? util.getParam(config.questionBase,'?',{page: page,tagged:tag}) : util.getParam(config.questionBase,'?',{page: page});
                    return $http.get(param);
                },
                getQuestion: function () {
                    var param = util.getParam(config.questionBase,$routeParams.id+'?',{filter: '!9YdnSJ*_S'});
                    return $http.get(param);
//                    return {"items":[{"tags":["javascript","php","jquery","html","canvas"],"owner":{"reputation":169,"user_id":4705209,"user_type":"registered","profile_image":"http://graph.facebook.com/10153224999727718/picture?type=large","display_name":"Bradley Wilson","link":"http://stackoverflow.com/users/4705209/bradley-wilson"},"is_answered":true,"view_count":117,"bounty_amount":50,"bounty_closes_date":1428925030,"accepted_answer_id":29471296,"answer_count":3,"score":3,"last_activity_date":1428412343,"creation_date":1427901030,"last_edit_date":1428321889,"question_id":29394442,"link":"http://stackoverflow.com/questions/29394442/image-retrieval-from-directory-and-session-variable-issues-php","title":"image retrieval from directory and session variable issues - php"}],"has_more":false,"quota_max":10000,"quota_remaining":9686};
                },
                getComments: function (page) {
                    var param = util.getParam(config.questionBase,$routeParams.id+'/comments?',{page: page, order: 'asc', filter: '!-*f(6sexcV94'});
                    return $http.get(param);
//                    return {"items":[{"owner":{"reputation":53,"user_id":3671997,"user_type":"registered","profile_image":"http://i.stack.imgur.com/uoJ9Y.png?s=128&g=1","display_name":"Malik Asif Comsats","link":"http://stackoverflow.com/users/3671997/malik-asif-comsats"},"reply_to_user":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":0,"creation_date":1428321418,"post_id":29394442,"comment_id":47103106,"body":"Good interprettor @ApoorvBambarde ."},{"owner":{"reputation":53,"user_id":3671997,"user_type":"registered","profile_image":"http://i.stack.imgur.com/uoJ9Y.png?s=128&g=1","display_name":"Malik Asif Comsats","link":"http://stackoverflow.com/users/3671997/malik-asif-comsats"},"reply_to_user":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":0,"creation_date":1428321418,"post_id":29394442,"comment_id":47103106,"body":"Good interprettor @ApoorvBambarde ."},{"owner":{"reputation":53,"user_id":3671997,"user_type":"registered","profile_image":"http://i.stack.imgur.com/uoJ9Y.png?s=128&g=1","display_name":"Malik Asif Comsats","link":"http://stackoverflow.com/users/3671997/malik-asif-comsats"},"reply_to_user":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":0,"creation_date":1428321418,"post_id":29394442,"comment_id":47103106,"body":"Good interprettor @ApoorvBambarde ."},{"owner":{"reputation":53,"user_id":3671997,"user_type":"registered","profile_image":"http://i.stack.imgur.com/uoJ9Y.png?s=128&g=1","display_name":"Malik Asif Comsats","link":"http://stackoverflow.com/users/3671997/malik-asif-comsats"},"reply_to_user":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":0,"creation_date":1428321418,"post_id":29394442,"comment_id":47103106,"body":"Good interprettor @ApoorvBambarde ."},{"owner":{"reputation":53,"user_id":3671997,"user_type":"registered","profile_image":"http://i.stack.imgur.com/uoJ9Y.png?s=128&g=1","display_name":"Malik Asif Comsats","link":"http://stackoverflow.com/users/3671997/malik-asif-comsats"},"reply_to_user":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":0,"creation_date":1428321418,"post_id":29394442,"comment_id":47103106,"body":"Good interprettor @ApoorvBambarde ."},{"owner":{"reputation":53,"user_id":3671997,"user_type":"registered","profile_image":"http://i.stack.imgur.com/uoJ9Y.png?s=128&g=1","display_name":"Malik Asif Comsats","link":"http://stackoverflow.com/users/3671997/malik-asif-comsats"},"reply_to_user":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":0,"creation_date":1428321418,"post_id":29394442,"comment_id":47103106,"body":"Good interprettor @ApoorvBambarde ."},{"owner":{"reputation":53,"user_id":3671997,"user_type":"registered","profile_image":"http://i.stack.imgur.com/uoJ9Y.png?s=128&g=1","display_name":"Malik Asif Comsats","link":"http://stackoverflow.com/users/3671997/malik-asif-comsats"},"reply_to_user":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":0,"creation_date":1428321418,"post_id":29394442,"comment_id":47103106,"body":"Good interprettor @ApoorvBambarde ."},{"owner":{"reputation":136,"user_id":4129637,"user_type":"registered","profile_image":"https://lh5.googleusercontent.com/-DcQIHYyRFcs/AAAAAAAAAAI/AAAAAAAAAEE/8xnRwreoFoo/photo.jpg?sz=128","display_name":"Apoorv Bambarde","link":"http://stackoverflow.com/users/4129637/apoorv-bambarde"},"edited":false,"score":2,"creation_date":1428321287,"post_id":29394442,"comment_id":47103031,"body":"Use this line $realPath = &#39;uploads/&#39;.$_SESSION[&#39;id&#39;]; instead of $realPath = &#39;uploads/&#39;. echo $_SESSION[&#39;id&#39;];"}],"has_more":false,"quota_max":10000,"quota_remaining":9668,"total":2};
                },
                getAnswers: function (page) {
                    var param = util.getParam(config.questionBase,$routeParams.id+'/answers?',{page: page, order: 'desc', sort: 'activity', filter: '!-*f(6tIDgtXe'});
//                    return {"items":[{"owner":{"reputation":1124,"user_id":2447250,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/bd0cc9498f7d3ae396d6876af19a813d?s=128&d=identicon&r=PG","display_name":"David Zhang","link":"http://stackoverflow.com/users/2447250/david-zhang"},"is_accepted":true,"score":131,"last_activity_date":1428801135,"last_edit_date":1428801135,"creation_date":1428404290,"answer_id":29489919,"question_id":29481088,"body":"<p>Here's a concise solution which avoids regular expressions and slow in-Python loops:</p>\n\n<pre><code>def principal_period(s):\n    i = (s+s).find(s, 1, -1)\n    return None if i == -1 else s[:i]\n</code></pre>\n\n<p>See the <a href=\"http://stackoverflow.com/a/29482936/2447250\">Community Wiki answer</a> started by @davidism for benchmark results. In summary,</p>\n\n<blockquote>\n  <p>David Zhang's solution is the clear winner, outperforming all others by at least 5x for the large example set.</p>\n</blockquote>\n\n<p>(That answer's words, not mine.)</p>\n\n<p>This is based on the observation that a string is periodic if and only if it is equal to a nontrivial rotation of itself. Kudos to @AleksiTorhamo for realizing that we can then recover the principal period from the index of the first occurrence of <code>s</code> in <code>(s+s)[1:-1]</code>, and for informing me of the optional <code>start</code> and <code>end</code> arguments of Python's <code>string.find</code>.</p>\n"},{"owner":{"reputation":12800,"user_id":400617,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/5aa7ef250a486833a8c6c933c523b282?s=128&d=identicon&r=PG","display_name":"davidism","link":"http://stackoverflow.com/users/400617/davidism"},"is_accepted":false,"community_owned_date":1428375674,"score":35,"last_activity_date":1428600350,"last_edit_date":1428600350,"creation_date":1428375324,"answer_id":29482936,"question_id":29481088,"body":"<p>Here are some benchmarks for the various answers to this question. There were some surprising results, including wildly different performance depending on the string being tested.</p>\n\n<p>I had to modify some functions to work on Python 3. If you see something wrong, want to add your function, or want to add another test string, let me know.</p>\n\n<p>In summary: there's about a 50x difference between the best- and worst-performing solutions for the large set of example data supplied by OP <a href=\"http://paste.ubuntu.com/10765231/\">here</a> (via <a href=\"http://stackoverflow.com/questions/29481088/how-can-i-tell-if-a-string-repeats-itself-in-python#comment47156601_29481088\">this</a> comment). <a href=\"http://stackoverflow.com/a/29489919\">David Zhang's solution</a> is the clear winner, outperforming all others by at least 5x for the large example set.</p>\n\n<p>A couple of the answers are <em>very</em> slow in extremely large \"no match\" cases. Otherwise, the functions seem to be equally matched or clear winners depending on the test.</p>\n\n<p>Here are the results, including plots made (using the modified code <a href=\"https://gist.github.com/Ffisegydd/5c8e927a63ef35ce7354\">here</a>) using matplotlib and seaborn to show the different distributions:</p>\n\n<p><strong>Corpus 1 (supplied examples - small set)</strong></p>\n\n<pre><code>mean performance:\n 0.0006  david_zhang\n 0.0017  zero\n 0.0026  antti\n 0.0029  carpetpython\n 0.0034  tigerhawk_2\n 0.0059  tigerhawk_1\n 0.0062  davidism\n 0.0068  saksham\n 0.0100  riad\n 0.0186  shashank\n\nmedian performance:\n 0.0006  david_zhang\n 0.0016  zero\n 0.0024  antti\n 0.0027  carpetpython\n 0.0032  tigerhawk_2\n 0.0055  tigerhawk_1\n 0.0061  davidism\n 0.0068  saksham\n 0.0103  riad\n 0.0179  shashank\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/PARb0.png\" alt=\"Corpus 1 graph\">\n<a href=\"http://i.stack.imgur.com/PARb0.png\">Higher resolution image</a></p>\n\n<hr>\n\n<p><strong>Corpus 2 (supplied examples - large set)</strong></p>\n\n<pre><code>mean performance:\n 0.0011  david_zhang\n 0.0072  antti\n 0.0078  zero\n 0.0079  carpetpython\n 0.0133  davidism\n 0.0147  tigerhawk_2\n 0.0225  shashank\n 0.0243  tigerhawk_1\n 0.0350  riad\n 0.0578  saksham\n\nmedian performance:\n 0.0007  david_zhang\n 0.0036  zero\n 0.0044  antti\n 0.0048  carpetpython\n 0.0072  tigerhawk_2\n 0.0086  davidism\n 0.0121  tigerhawk_1\n 0.0151  riad\n 0.0197  shashank\n 0.0214  saksham\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/qBCzd.png\" alt=\"Corpus 2 graph\">\n<a href=\"http://i.stack.imgur.com/qBCzd.png\">Higher resolution image</a></p>\n\n<hr>\n\n<p><strong>Corpus 3 (edge cases)</strong></p>\n\n<pre><code>mean performance:\n 0.0750  david_zhang\n 0.0779  carpetpython\n 0.0955  antti\n 0.3300  tigerhawk_2\n 0.4258  tigerhawk_1\n 0.4506  davidism\n 1.3021  saksham\n 1.3510  shashank\n 7.1807  zero\n11.5788  riad\n\nmedian performance:\n 0.0215  antti\n 0.0218  carpetpython\n 0.0221  tigerhawk_2\n 0.0232  david_zhang\n 0.0266  tigerhawk_1\n 0.0469  saksham\n 0.1325  davidism\n 0.1961  zero\n 2.1620  shashank\n 3.6235  riad\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/b6K1E.png\" alt=\"Corpus 3 graph\">\n<a href=\"http://i.stack.imgur.com/b6K1E.png\">Higher resolution image</a></p>\n\n<hr>\n\n<p>The tests and raw results are available <a href=\"https://bitbucket.org/snippets/schesis/nMnR\">here</a>.</p>\n"},{"owner":{"reputation":139,"user_id":3259619,"user_type":"registered","profile_image":"http://i.stack.imgur.com/C56vu.png?s=128&g=1","display_name":"CarpetPython","link":"http://stackoverflow.com/users/3259619/carpetpython"},"is_accepted":false,"score":2,"last_activity_date":1428596489,"last_edit_date":1428596489,"creation_date":1428596101,"answer_id":29543743,"question_id":29481088,"body":"<p>I started with more than eight solutions to this problem. Some were bases on regex (match, findall, split), some of string slicing and testing, and some with string methods (find, count, split). Each had benefits in code clarity, code size, speed and memory consumption. I was going to post my answer here when I noticed that execution speed was ranked as important, so I did more testing and improvement to arrive at this:</p>\n\n\n\n<pre class=\"lang-python prettyprint-override\"><code>def repeating(s):\n    size = len(s)\n    incr = size % 2 + 1\n    for n in xrange(1, size//2+1, incr):\n        if size % n == 0:\n            if s[:n] * (size//n) == s:\n                return s[:n]\n</code></pre>\n\n<p>This answer seems similar to a few other answers here, but it has a few speed optimisations others have not used:</p>\n\n<ul>\n<li><code>xrange</code> is a little faster in this application,</li>\n<li>if an input string is an odd length, do not check any even length substrings,</li>\n<li>by using <code>s[:n]</code> directly, we avoid creating a variable in each loop.</li>\n</ul>\n\n<p>I would be interested to see how this performs in the standard tests with common hardware. I believe it will be well short of David Zhang's excellent algorithm in most tests, but should be quite fast otherwise.</p>\n\n<p>I found this problem to be very counter-intuitive. The solutions I thought would be fast were slow. The solutions that looked slow were fast! It seems that Python's string creation with the multiply operator and string comparisons are highly optimised.</p>\n"},{"owner":{"reputation":23355,"user_id":918959,"user_type":"registered","accept_rate":86,"profile_image":"https://www.gravatar.com/avatar/ca71042d9d6724f4cbc2598195662eb0?s=128&d=identicon&r=PG","display_name":"Antti Haapala","link":"http://stackoverflow.com/users/918959/antti-haapala"},"is_accepted":false,"score":10,"last_activity_date":1428565882,"last_edit_date":1428565882,"creation_date":1428387215,"answer_id":29484962,"question_id":29481088,"body":"<p>This version tries only those candidate sequence lengths that are factors of the string length; and uses the <code>*</code> operator to build a full-length string from the candidate sequence:</p>\n\n<pre><code>def get_shortest_repeat(string):\n    length = len(string)\n    for i in range(1, length // 2 + 1):\n        if length % i:  # skip non-factors early\n            continue\n\n        candidate = string[:i]\n        if string == candidate * (length // i):\n            return candidate\n\n    return None\n</code></pre>\n\n<p>Thanks to TigerhawkT3 for noticing that <code>length // 2</code> without <code>+ 1</code> would fail to match the <code>abab</code> case.</p>\n"},{"owner":{"reputation":13488,"user_id":1014938,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/3a6ff7904d56fe1e2ac8d855c6fb254d?s=128&d=identicon&r=PG","display_name":"Zero Piraeus","link":"http://stackoverflow.com/users/1014938/zero-piraeus"},"is_accepted":false,"score":136,"last_activity_date":1428535211,"last_edit_date":1428535211,"creation_date":1428362296,"answer_id":29481228,"question_id":29481088,"body":"<p>Here's a solution using regular expressions.</p>\n\n<pre><code>import re\n\nREPEATER = re.compile(r\"(.+?)\\1+$\")\n\ndef repeated(s):\n    match = REPEATER.match(s)\n    return match.group(1) if match else None\n</code></pre>\n\n<p>Iterating over the examples in the question:</p>\n\n<pre><code>examples = [\n    '0045662100456621004566210045662100456621',\n    '0072992700729927007299270072992700729927',\n    '001443001443001443001443001443001443001443',\n    '037037037037037037037037037037037037037037037',\n    '047619047619047619047619047619047619047619',\n    '002457002457002457002457002457002457002457',\n    '001221001221001221001221001221001221001221',\n    '001230012300123001230012300123001230012300123',\n    '0013947001394700139470013947001394700139470013947',\n    '001001001001001001001001001001001001001001001001001',\n    '001406469760900140646976090014064697609',\n    '004608294930875576036866359447',\n    '00469483568075117370892018779342723',\n    '004739336492890995260663507109',\n    '001508295625942684766214177978883861236802413273',\n    '007518796992481203',\n    '0071942446043165467625899280575539568345323741',\n    '0434782608695652173913',\n    '0344827586206896551724137931',\n    '002481389578163771712158808933',\n    '002932551319648093841642228739',\n    '0035587188612099644128113879',\n    '003484320557491289198606271777',\n    '00115074798619102416570771',\n]\n\nfor e in examples:\n    sub = repeated(e)\n    if sub:\n        print(\"%r: %r\" % (e, sub))\n    else:\n        print(\"%r does not repeat.\" % e)\n</code></pre>\n\n<p>... produces this output:</p>\n\n<pre><code>'0045662100456621004566210045662100456621': '00456621'\n'0072992700729927007299270072992700729927': '00729927'\n'001443001443001443001443001443001443001443': '001443'\n'037037037037037037037037037037037037037037037': '037'\n'047619047619047619047619047619047619047619': '047619'\n'002457002457002457002457002457002457002457': '002457'\n'001221001221001221001221001221001221001221': '001221'\n'001230012300123001230012300123001230012300123': '00123'\n'0013947001394700139470013947001394700139470013947': '0013947'\n'001001001001001001001001001001001001001001001001001': '001'\n'001406469760900140646976090014064697609': '0014064697609'\n'004608294930875576036866359447' does not repeat.\n'00469483568075117370892018779342723' does not repeat.\n'004739336492890995260663507109' does not repeat.\n'001508295625942684766214177978883861236802413273' does not repeat.\n'007518796992481203' does not repeat.\n'0071942446043165467625899280575539568345323741' does not repeat.\n'0434782608695652173913' does not repeat.\n'0344827586206896551724137931' does not repeat.\n'002481389578163771712158808933' does not repeat.\n'002932551319648093841642228739' does not repeat.\n'0035587188612099644128113879' does not repeat.\n'003484320557491289198606271777' does not repeat.\n'00115074798619102416570771' does not repeat.\n</code></pre>\n\n<p>The regular expression <code>(.+?)\\1+$</code> is divided into three parts:</p>\n\n<ol>\n<li><p><code>(.+?)</code> is a matching group containing at least one (but as few as possible) of any character (because <a href=\"https://docs.python.org/3/library/re.html#regular-expression-syntax\"><code>+?</code> is non-greedy</a>).</p></li>\n<li><p><code>\\1+</code> checks for at least one repetition of the matching group in the first part.</p></li>\n<li><p><code>$</code> checks for the end of the string, to ensure that there's no extra, non-repeating content after the repeated substrings (and using <a href=\"https://docs.python.org/3/library/re.html#re.match\"><code>re.match()</code></a> ensures that there's no non-repeating text <em>before</em> the repeated substrings).</p></li>\n</ol>\n\n<p>In Python 3.4 and later, you could drop the <code>$</code> and use <a href=\"https://docs.python.org/3/library/re.html#re.fullmatch\"><code>re.fullmatch()</code></a> instead, or (in any Python at least as far back as 2.3) go the other way and use <a href=\"https://docs.python.org/3/library/re.html#re.search\"><code>re.search()</code></a> with the regex <code>^(.+?)\\1+$</code>, all of which are more down to personal taste than anything else.</p>\n"},{"owner":{"reputation":1985,"user_id":2617068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/dae9431b46967002ac698da8304fa916?s=128&d=identicon&r=PG","display_name":"TigerhawkT3","link":"http://stackoverflow.com/users/2617068/tigerhawkt3"},"is_accepted":false,"score":26,"last_activity_date":1428525832,"last_edit_date":1428525832,"creation_date":1428362438,"answer_id":29481244,"question_id":29481088,"body":"<p>Non-regex solution:</p>\n\n<pre><code>def repeat(string):\n    for i in range(1, len(string)//2+1):\n        if not len(string)%len(string[0:i]) and string[0:i]*(len(string)//len(string[0:i])) == string:\n            return string[0:i]\n</code></pre>\n\n<p>Faster non-regex solution, thanks to @ThatWeirdo (see comments):</p>\n\n<pre><code>def repeat(string):\n    l = len(string)\n    for i in range(1, len(string)//2+1):\n        if l%i: continue\n        s = string[0:i]\n        if s*(l//i) == string:\n            return s\n</code></pre>\n\n<p>The above solution is very rarely slower than the original by a few percent, but it's usually a good bit faster - sometimes a whole lot faster. It's still not faster than davidism's for longer strings, and zero's regex solution is superior for short strings. It comes out to the fastest (according to davidism's test on github - see his answer) with strings of about 1000-1500 characters. Regardless, it's reliably second-fastest (or better) in all cases I tested. Thanks, ThatWeirdo.</p>\n\n<p>Test:</p>\n\n<pre><code>print(repeat('009009009'))\nprint(repeat('254725472547'))\nprint(repeat('abcdeabcdeabcdeabcde'))\nprint(repeat('abcdefg'))\nprint(repeat('09099099909999'))\nprint(repeat('02589675192'))\n</code></pre>\n\n<p>Results:</p>\n\n<pre><code>009\n2547\nabcde\nNone\nNone\nNone\n</code></pre>\n"},{"owner":{"reputation":17457,"user_id":768110,"user_type":"registered","accept_rate":77,"profile_image":"http://i.stack.imgur.com/UKahT.jpg?s=128&g=1","display_name":"RiaD","link":"http://stackoverflow.com/users/768110/riad"},"is_accepted":false,"score":6,"last_activity_date":1428515082,"last_edit_date":1428515082,"creation_date":1428509078,"answer_id":29519746,"question_id":29481088,"body":"<p>The problem may also be solved in <code>O(n)</code> in worst case with prefix function.</p>\n\n<p>Note, it may be slower in general case(UPD: and is much slower) than other solutions which depend on number of divisors of <code>n</code>, but usually find fails sooner, I think one of bad cases for them will be <code>aaa....aab</code>, where there are <code>n - 1 = 2 * 3 * 5 * 7 ... *p_n - 1</code> <code>a</code>'s</p>\n\n<p>First of all you need to calculate prefix function</p>\n\n<pre><code>def prefix_function(s):\n    n = len(s)\n    pi = [0] * n\n    for i in xrange(1, n):\n        j = pi[i - 1]\n        while(j &gt; 0 and s[i] != s[j]):\n            j = pi[j - 1]\n        if (s[i] == s[j]):\n            j += 1\n        pi[i] = j;\n    return pi\n</code></pre>\n\n<p>then either there's no answer or the shortest period is</p>\n\n<pre><code>k = len(s) - prefix_function(s[-1])\n</code></pre>\n\n<p>and you just have to check if <code>k != n and n % k == 0</code> (if <code>k != n and n % k == 0</code> then answer is <code>s[:k]</code>, else there's no answer</p>\n\n<p>You may check the proof <a href=\"http://e-maxx.ru/algo/prefix_function#header_12\">here</a> (in Russian, but online translator will probably do the trick)</p>\n\n<pre><code>def riad(s):\n    n = len(s)\n    pi = [0] * n\n    for i in xrange(1, n):\n        j = pi[i - 1]\n        while(j &gt; 0 and s[i] != s[j]):\n            j = pi[j - 1]\n        if (s[i] == s[j]):\n            j += 1\n        pi[i] = j;\n    k = n - pi[-1]\n    return s[:k] if (n != k and n % k == 0) else None\n</code></pre>\n"},{"owner":{"reputation":12800,"user_id":400617,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/5aa7ef250a486833a8c6c933c523b282?s=128&d=identicon&r=PG","display_name":"davidism","link":"http://stackoverflow.com/users/400617/davidism"},"is_accepted":false,"score":15,"last_activity_date":1428498786,"last_edit_date":1428498786,"creation_date":1428374520,"answer_id":29482830,"question_id":29481088,"body":"<p>First, halve the string as long as it's a \"2 part\" duplicate.  This reduces the search space if there are an even number of repeats.  Then, working forwards to find the smallest repeating string, check if splitting the full string by increasingly larger sub-string results in only empty values.  Only sub-strings up to <code>length // 2</code> need to be tested since anything over that would have no repeats.</p>\n\n<pre><code>def shortest_repeat(orig_value):\n    if not orig_value:\n        return None\n\n    value = orig_value\n\n    while True:\n        len_half = len(value) // 2\n        first_half = value[:len_half]\n\n        if first_half != value[len_half:]:\n            break\n\n        value = first_half\n\n    len_value = len(value)\n    split = value.split\n\n    for i in (i for i in range(1, len_value // 2) if len_value % i == 0):\n        if not any(split(value[:i])):\n            return value[:i]\n\n    return value if value != orig_value else None\n</code></pre>\n\n<p>This returns the shortest match or None if there is no match.</p>\n"},{"owner":{"reputation":5848,"user_id":2653390,"user_type":"registered","accept_rate":86,"profile_image":"http://i.stack.imgur.com/8sBp1.png?s=128&g=1","display_name":"Shashank","link":"http://stackoverflow.com/users/2653390/shashank"},"is_accepted":false,"score":67,"last_activity_date":1428460864,"last_edit_date":1428460864,"creation_date":1428362571,"answer_id":29481262,"question_id":29481088,"body":"<p>You can make the observation that for a string to be considered repeating, its length must be divisible by the length of its repeated sequence. Given that, here is a solution that generates divisors of the length from <code>1</code> to <code>n / 2</code> inclusive, divides the original string into substrings with the length of the divisors, and tests the equality of the result set:</p>\n\n<pre><code>def divisors(n):\n    if n &gt; 1: yield 1\n    from math import sqrt, floor\n    kq = []\n    for k in range(2, int(floor(sqrt(n))) + 1):\n        q, r = divmod(n, k)\n        if r == 0:\n            yield k\n            kq.append(q)\n    while kq:\n        yield kq.pop()\n\ndef repeats(s):\n    l = len(s)\n    for d in divisors(l):\n        spl = (s[i:i+d] for i in range(0, l, d))\n        spl0 = next(spl)\n        if all(x == spl0 for x in spl):\n            return spl0\n    return None\n</code></pre>\n\n<p><strong>EDIT:</strong> In Python 3, the <code>/</code> operator has changed to do float division by default. To get the <code>int</code> division from Python 2, you can use the <code>//</code> operator instead. Thank you to @TigerhawkT3 for bringing this to my attention.</p>\n\n<p>The <code>//</code> operator performs integer division in both Python 2 and Python 3, so I've updated the answer to support both versions. The part where we test to see if all the substrings are equal is now a short-circuiting operation using <code>all</code> and a generator expression.</p>\n\n<p><strong>UPDATE:</strong> In response to a change in the original question, the code has now been updated to return the smallest repeating substring if it exists and <code>None</code> if it does not. @godlygeek has suggested using <code>divmod</code> to reduce the number of iterations on the <code>divisors</code> generator, and the code has been updated to match that as well. It now returns all positive divisors of <code>n</code> in ascending order, exclusive of <code>n</code> itself.</p>\n"},{"owner":{"reputation":571,"user_id":4596008,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/a6f8b8d8e464b83cd72250974bfd8bbd?s=128&d=identicon&r=PG&f=1","display_name":"Saksham Varma","link":"http://stackoverflow.com/users/4596008/saksham-varma"},"is_accepted":false,"score":8,"last_activity_date":1428388793,"last_edit_date":1428388793,"creation_date":1428371731,"answer_id":29482465,"question_id":29481088,"body":"<p>Here's a straight forward solution, without regexes. </p>\n\n<p>For substrings of <code>s</code> starting from zeroth index, of lengths 1 through <code>len(s)</code>, check if that substring, <code>substr</code> is the repeated pattern. This check can be performed by concatenating <code>substr</code> with itself <code>ratio</code> times, such that the length of the string thus formed is equal to the length of <code>s</code>. Hence <code>ratio=len(s)/len(substr)</code>. </p>\n\n<p>Return when first such substring is found. This would provide the smallest possible substring, if one exists.</p>\n\n<pre><code>def check_repeat(s):\n    for i in range(1, len(s)):\n        substr = s[:i]\n        ratio = len(s)/len(substr)\n        if substr * ratio == s:\n            print 'Repeating on \"%s\"' % substr\n            return\n    print 'Non repeating'\n\n&gt;&gt;&gt; check_repeat('254725472547')\nRepeating on \"2547\"\n&gt;&gt;&gt; check_repeat('abcdeabcdeabcdeabcde')\nRepeating on \"abcde\"\n</code></pre>\n"}],"has_more":false,"quota_max":10000,"quota_remaining":9997,"page":1,"page_size":30,"total":10,"type":"answer"};
                    return $http.get(param);
                },
                getAnswerComments: function (answerId, page) {
                    var param = util.getParam(config.answerBase,answerId+'/comments?',{page: page, order: 'asc', filter: '!-*f(6tIDgtXe'});
                    return $http.get(param);
//                    return {"items":[{"owner":{"reputation":43840,"user_id":2455888,"user_type":"registered","accept_rate":82,"profile_image":"http://i.stack.imgur.com/MQu4W.png?s=128&g=1","display_name":"haccks","link":"http://stackoverflow.com/users/2455888/haccks"},"edited":false,"score":0,"creation_date":1428784830,"post_id":29489919,"comment_id":47313885,"body":"Amazing! Finally this answer got a downvote. Kudos to downvoter!"},{"owner":{"reputation":1124,"user_id":2447250,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/bd0cc9498f7d3ae396d6876af19a813d?s=128&d=identicon&r=PG","display_name":"David Zhang","link":"http://stackoverflow.com/users/2447250/david-zhang"},"reply_to_user":{"reputation":37190,"user_id":238886,"user_type":"registered","accept_rate":81,"profile_image":"https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG","display_name":"Wayne Conrad","link":"http://stackoverflow.com/users/238886/wayne-conrad"},"edited":false,"score":3,"creation_date":1428783307,"post_id":29489919,"comment_id":47313443,"body":"@WayneConrad Take a string, say, <code>&quot;abcd&quot;</code>, pop off the character on the right, and stick it back on to the left to obtain <code>&quot;dabc&quot;</code>. This procedure is called <i>rotating a string to the right by 1 character</i>. Repeat <code>n</code> times to rotate a string to the right by <code>n</code> characters. Now observe that if we have a string of <code>k</code> characters, rotating to the right by any multiple of <code>k</code> leaves the string unchanged. A <i>nontrivial</i> rotation of a string is one whose character number is not a multiple of the string&#39;s length."},{"owner":{"reputation":43840,"user_id":2455888,"user_type":"registered","accept_rate":82,"profile_image":"http://i.stack.imgur.com/MQu4W.png?s=128&g=1","display_name":"haccks","link":"http://stackoverflow.com/users/2455888/haccks"},"reply_to_user":{"reputation":37190,"user_id":238886,"user_type":"registered","accept_rate":81,"profile_image":"https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG","display_name":"Wayne Conrad","link":"http://stackoverflow.com/users/238886/wayne-conrad"},"edited":false,"score":0,"creation_date":1428782686,"post_id":29489919,"comment_id":47313240,"body":"@WayneConrad; If you already got how it works then I will say the three line of code is just an implementation of that paragraph. Non-trivial rotation means if you rotate the string <code>abcabcabcabcabc</code> by one character three times then you will get the same string after the rotation."},{"owner":{"reputation":37190,"user_id":238886,"user_type":"registered","accept_rate":81,"profile_image":"https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG","display_name":"Wayne Conrad","link":"http://stackoverflow.com/users/238886/wayne-conrad"},"reply_to_user":{"reputation":43840,"user_id":2455888,"user_type":"registered","accept_rate":82,"profile_image":"http://i.stack.imgur.com/MQu4W.png?s=128&g=1","display_name":"haccks","link":"http://stackoverflow.com/users/2455888/haccks"},"edited":false,"score":0,"creation_date":1428782336,"post_id":29489919,"comment_id":47313116,"body":"@haccks Yes, I got how it works.  It&#39;s incredibly pretty.  I&#39;ve burned it into memory because it&#39;s not just a Python trick--it&#39;ll work in Ruby just as well.  I just don&#39;t see anything rotating there..."},{"owner":{"reputation":43840,"user_id":2455888,"user_type":"registered","accept_rate":82,"profile_image":"http://i.stack.imgur.com/MQu4W.png?s=128&g=1","display_name":"haccks","link":"http://stackoverflow.com/users/2455888/haccks"},"reply_to_user":{"reputation":37190,"user_id":238886,"user_type":"registered","accept_rate":81,"profile_image":"https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG","display_name":"Wayne Conrad","link":"http://stackoverflow.com/users/238886/wayne-conrad"},"edited":false,"score":0,"creation_date":1428781256,"post_id":29489919,"comment_id":47312751,"body":"@WayneConrad; Don&#39;t lie please. Tell me that along with &quot;rotation&quot; you also didn&#39;t get &quot;principle period&quot; and how actually is <code>i = (s+s).find(s, 1, -1)</code> doing magic? I will explain :)"},{"owner":{"reputation":37190,"user_id":238886,"user_type":"registered","accept_rate":81,"profile_image":"https://www.gravatar.com/avatar/8ca29123b5669b26f9b6ca2c62d9d215?s=128&d=identicon&r=PG","display_name":"Wayne Conrad","link":"http://stackoverflow.com/users/238886/wayne-conrad"},"edited":false,"score":0,"creation_date":1428780927,"post_id":29489919,"comment_id":47312633,"body":"What does the word &quot;rotation&quot; mean in this context?"},{"owner":{"reputation":43840,"user_id":2455888,"user_type":"registered","accept_rate":82,"profile_image":"http://i.stack.imgur.com/MQu4W.png?s=128&g=1","display_name":"haccks","link":"http://stackoverflow.com/users/2455888/haccks"},"edited":false,"score":0,"creation_date":1428780423,"post_id":29489919,"comment_id":47312447,"body":"If anyone still thinks that this code is obfuscated then I will post the deobfuscated version of the same :)"},{"owner":{"reputation":15475,"user_id":1763356,"user_type":"registered","accept_rate":70,"profile_image":"http://i.stack.imgur.com/zGWG9.png?s=128&g=1","display_name":"Veedrac","link":"http://stackoverflow.com/users/1763356/veedrac"},"reply_to_user":{"reputation":2123,"user_id":1112163,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/0f17483c5cbcd29abf977d6bbe7eba3b?s=128&d=identicon&r=PG","display_name":"ajkumar25","link":"http://stackoverflow.com/users/1112163/ajkumar25"},"edited":false,"score":2,"creation_date":1428678079,"post_id":29489919,"comment_id":47279010,"body":"@ajkumar25 Because you need to start at an offset of at least 1 (to stop it matching the trivial rotation - itself) and some string contain a string larger than it so it needs to be extended."},{"owner":{"reputation":2123,"user_id":1112163,"user_type":"registered","accept_rate":80,"profile_image":"https://www.gravatar.com/avatar/0f17483c5cbcd29abf977d6bbe7eba3b?s=128&d=identicon&r=PG","display_name":"ajkumar25","link":"http://stackoverflow.com/users/1112163/ajkumar25"},"edited":false,"score":0,"creation_date":1428677839,"post_id":29489919,"comment_id":47278856,"body":"Anyone please explain why its (s+s) not s?"},{"owner":{"reputation":1985,"user_id":2617068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/dae9431b46967002ac698da8304fa916?s=128&d=identicon&r=PG","display_name":"TigerhawkT3","link":"http://stackoverflow.com/users/2617068/tigerhawkt3"},"edited":false,"score":2,"creation_date":1428572847,"post_id":29489919,"comment_id":47222896,"body":"I like how that update is from barely more than a day before I made that comment... work with me, Guido!"},{"owner":{"reputation":13488,"user_id":1014938,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/3a6ff7904d56fe1e2ac8d855c6fb254d?s=128&d=identicon&r=PG","display_name":"Zero Piraeus","link":"http://stackoverflow.com/users/1014938/zero-piraeus"},"edited":false,"score":4,"creation_date":1428551414,"post_id":29489919,"comment_id":47212616,"body":"Guido&#39;s <a href=\"https://mail.python.org/pipermail/python-dev/2015-April/139054.html\" rel=\"nofollow\">recent update</a> to <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP 8</a> is relevant here: &quot;Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. <b>If any return statement returns an expression,</b> any return statements where no value is returned should explicitly state this as return None, and <b>an explicit return statement should be present at the end of the function</b> (if reachable).&quot;"},{"owner":{"reputation":1985,"user_id":2617068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/dae9431b46967002ac698da8304fa916?s=128&d=identicon&r=PG","display_name":"TigerhawkT3","link":"http://stackoverflow.com/users/2617068/tigerhawkt3"},"edited":false,"score":0,"creation_date":1428547559,"post_id":29489919,"comment_id":47211685,"body":"I consider it to be in line with <code>if not string</code> instead of <code>if string == &#39;&#39;</code>: taken care of by the language so that we don&#39;t have to. Just my opinion, though."},{"owner":{"reputation":1124,"user_id":2447250,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/bd0cc9498f7d3ae396d6876af19a813d?s=128&d=identicon&r=PG","display_name":"David Zhang","link":"http://stackoverflow.com/users/2447250/david-zhang"},"reply_to_user":{"reputation":1985,"user_id":2617068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/dae9431b46967002ac698da8304fa916?s=128&d=identicon&r=PG","display_name":"TigerhawkT3","link":"http://stackoverflow.com/users/2617068/tigerhawkt3"},"edited":false,"score":0,"creation_date":1428546761,"post_id":29489919,"comment_id":47211507,"body":"@TigerhawkT3 Maybe it&#39;s just me, but I prefer to <code>return None</code> explicitly if it&#39;s part of the intended behavior of the function. As <i>The Zen of Python</i> says, &quot;Explicit is better than implicit.&quot;"},{"owner":{"reputation":5848,"user_id":2653390,"user_type":"registered","accept_rate":86,"profile_image":"http://i.stack.imgur.com/8sBp1.png?s=128&g=1","display_name":"Shashank","link":"http://stackoverflow.com/users/2653390/shashank"},"edited":false,"score":7,"creation_date":1428529924,"post_id":29489919,"comment_id":47206379,"body":"It&#39;s like if you take a sin or cos wave from a <a href=\"http://en.wikipedia.org/wiki/Periodic_function\" rel=\"nofollow\">periodic function</a> and shift it to the right. Since it&#39;s fully periodic, the waves will eventually match up perfectly...The math parallels to this solution are just phenomenal. :) I wish I could give you +∞ upvotes."},{"owner":{"reputation":5848,"user_id":2653390,"user_type":"registered","accept_rate":86,"profile_image":"http://i.stack.imgur.com/8sBp1.png?s=128&g=1","display_name":"Shashank","link":"http://stackoverflow.com/users/2653390/shashank"},"edited":false,"score":1,"creation_date":1428527963,"post_id":29489919,"comment_id":47205398,"body":"It kind of reminds me of this answer in terms of sheer elegance: <a href=\"http://stackoverflow.com/a/2553533/2653390\">stackoverflow.com/a/2553533/2653390</a> I guess in general, people should pay more attention to strings concatenated to themselves. There is something really beautiful about prefixes, suffixes, and rotations..."},{"owner":{"reputation":1985,"user_id":2617068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/dae9431b46967002ac698da8304fa916?s=128&d=identicon&r=PG","display_name":"TigerhawkT3","link":"http://stackoverflow.com/users/2617068/tigerhawkt3"},"edited":false,"score":0,"creation_date":1428527963,"post_id":29489919,"comment_id":47205397,"body":"Just by the way here, but you can just do <code>if i!=1: return s[:i]</code>. If a function call doesn&#39;t <code>return</code> anything, it evaluates to <code>None</code> by default."},{"owner":{"reputation":5848,"user_id":2653390,"user_type":"registered","accept_rate":86,"profile_image":"http://i.stack.imgur.com/8sBp1.png?s=128&g=1","display_name":"Shashank","link":"http://stackoverflow.com/users/2653390/shashank"},"edited":false,"score":9,"creation_date":1428527203,"post_id":29489919,"comment_id":47205037,"body":"This is brilliant....o_o Nothing more to say."},{"owner":{"reputation":13488,"user_id":1014938,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/3a6ff7904d56fe1e2ac8d855c6fb254d?s=128&d=identicon&r=PG","display_name":"Zero Piraeus","link":"http://stackoverflow.com/users/1014938/zero-piraeus"},"edited":false,"score":1,"creation_date":1428521364,"post_id":29489919,"comment_id":47201762,"body":"I&#39;ve updated the benchmarking answer to include more recent answers – yours blows mine completely away :-)"},{"owner":{"reputation":1124,"user_id":2447250,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/bd0cc9498f7d3ae396d6876af19a813d?s=128&d=identicon&r=PG","display_name":"David Zhang","link":"http://stackoverflow.com/users/2447250/david-zhang"},"reply_to_user":{"reputation":2313,"user_id":680727,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/7e84ed97f423d7dd974efd8a871c5861?s=128&d=identicon&r=PG","display_name":"Aleksi Torhamo","link":"http://stackoverflow.com/users/680727/aleksi-torhamo"},"edited":false,"score":0,"creation_date":1428501144,"post_id":29489919,"comment_id":47188469,"body":"@AleksiTorhamo Oh, nice catch. I was unaware <code>string.find</code> could take optional <code>start</code> and <code>end</code> arguments. Thanks for the improvements!"},{"owner":{"reputation":2313,"user_id":680727,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/7e84ed97f423d7dd974efd8a871c5861?s=128&d=identicon&r=PG","display_name":"Aleksi Torhamo","link":"http://stackoverflow.com/users/680727/aleksi-torhamo"},"edited":false,"score":6,"creation_date":1428500868,"post_id":29489919,"comment_id":47188256,"body":"Also, I think <code>(s+s).find(s, 1, -1)</code> will be (very slightly) faster than <code>(s+s)[1:-1].find(s)</code>, at least for larger strings, since the slicing means you have to create another copy of (nearly) the entire string."},{"owner":{"reputation":1124,"user_id":2447250,"user_type":"registered","accept_rate":100,"profile_image":"https://www.gravatar.com/avatar/bd0cc9498f7d3ae396d6876af19a813d?s=128&d=identicon&r=PG","display_name":"David Zhang","link":"http://stackoverflow.com/users/2447250/david-zhang"},"reply_to_user":{"reputation":2313,"user_id":680727,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/7e84ed97f423d7dd974efd8a871c5861?s=128&d=identicon&r=PG","display_name":"Aleksi Torhamo","link":"http://stackoverflow.com/users/680727/aleksi-torhamo"},"edited":false,"score":0,"creation_date":1428496337,"post_id":29489919,"comment_id":47184918,"body":"@AleksiTorhamo Great idea! I&#39;ll edit the answer to add this functionality."},{"owner":{"reputation":2313,"user_id":680727,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/7e84ed97f423d7dd974efd8a871c5861?s=128&d=identicon&r=PG","display_name":"Aleksi Torhamo","link":"http://stackoverflow.com/users/680727/aleksi-torhamo"},"edited":false,"score":5,"creation_date":1428492331,"post_id":29489919,"comment_id":47182237,"body":"You can extend this to find the shortest repeating subsequence by using <code>.find()</code> or <code>.index()</code> instead of <code>in</code>, eg. <code>(s+s).find(s, 1, -1)</code>."},{"owner":{"reputation":1985,"user_id":2617068,"user_type":"registered","profile_image":"https://www.gravatar.com/avatar/dae9431b46967002ac698da8304fa916?s=128&d=identicon&r=PG","display_name":"TigerhawkT3","link":"http://stackoverflow.com/users/2617068/tigerhawkt3"},"edited":false,"score":0,"creation_date":1428430275,"post_id":29489919,"comment_id":47155230,"body":"This would be a good initial check to include in the other methods so that they can immediately return <code>None</code> for non-repeating strings."}],"has_more":false,"quota_max":10000,"quota_remaining":9992,"total":23};
                }
                
            };
        });
